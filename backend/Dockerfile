# Multi-stage build para optimizar el tama침o de la imagen final
# Etapa 1: Builder - Instalar dependencias
FROM python:3.11-slim as builder

# Instalar dependencias del sistema necesarias para compilar paquetes
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Crear directorio de trabajo
WORKDIR /app

# Copiar requirements y instalar dependencias en un directorio temporal
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Etapa 2: Runtime - Imagen final optimizada
FROM python:3.11-slim

# Crear usuario no-root para seguridad
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Instalar solo las dependencias de runtime necesarias
RUN apt-get update && apt-get install -y \
    && rm -rf /var/lib/apt/lists/*

# Crear directorios necesarios
WORKDIR /app
RUN mkdir -p /app/processed_files && \
    chown -R appuser:appuser /app

# Copiar dependencias instaladas desde la etapa builder
COPY --from=builder /root/.local /home/appuser/.local

# Copiar c칩digo de la aplicaci칩n
COPY --chown=appuser:appuser . .

# Configurar PATH para incluir paquetes de usuario
ENV PATH=/home/appuser/.local/bin:$PATH

# Variables de entorno para optimizaci칩n
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PORT=8000

# Cambiar al usuario no-root
USER appuser

# Exponer puerto
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health', timeout=10)" || exit 1

# Comando por defecto
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]